# Reminders in Python

# Strings

str.split() # defaults to whitespace

str.startswith("word") # do string comparisons, inefficient most likely but easish

str.strip(); rstrip(); lstrip()  # optionally add "chars" to strip instead of default

c.isdigit()
c.isnumeric()

str.find("sub") # returns the index of sub or -1

"sub" in s      # fast way to check inclusion..  


# lists, maps, filters and all that

# pro tip - python dictionaries can return a default value with the get function..
dc = {">":1, "<":-1}.get(x, 0)


# enumerate can be used to keep a index with a list
for i,v in enumerate(my_list):
  # i will be index
  # v will be value

# flatten a list of lists
[x for row in matrix for x in row]

map(fn, iter), probably easier to just do list comprehension, need to convert to list if you need random access
x = [np.pow(i) for i in iter]

x = list(filter(bn_fn, iter))      # bn_fn should return True or False, need to convert to list 
x = [i for i in seq if bn_fn(i)]   # maybe simpler reduce type functionality
lambda x: np.pow(x, 2)             # inline function example

# example of 2 dimension comprehension with condition, much more concise than two for loops
[(x, y) for x in [1,2,3] for y in [3,1,4] if x != y] 

# and comprehensions can be nested like this, (note this is a nifty matrix transpose exmaple
[[row[i] for row in matrix] for i in range(4)]


# Also, good write up on sorting
https://docs.python.org/3/howto/sorting.html#

# Decorate-Sort-Undecorate pattern

# iterate through dict
for k,v in m.items():
  k,v


# Itertools..

Find all combinations of 'a' 'b' of length 3..
itertools.product('ab',repeat=3)

Find all permutations of 'ABCD' of length 3.. (Permutations means just switching, so no replacement.. e.g. 'ABCD' of length 5 => None)
itertools.permutations('ABCD',3)

Find all permutations of ABCD of length 3, ignore order (Combination)
itertools.permutations('ABCD',3)



# Collections..
from collections import defaultdict
d = defaultdict(int) # default to 0, (str -> '' ; list -> [] ; lambda x: some_other_default ; )
if you lookup an item, it will join the list of keys..


from colleciton import Counter
# acts a lot like a default dictionary with int..



# Algorithms and Data Structures

Heaps can be used to implement priority queues, lowest number represents highest priority, out first
import heapq

a = [3,4,2,5] # or some other set of values, default is lowest first
l = [(0,'a'),(1,'b'),(10,'c')] # defaults to prioritze on key=e[0]
heapq.heapify(a)
heapq.heappush(a, item)
e=heapq.heappop(a)
# can merge multiple iterables..
heapq.merge(*iterables) # returns the sorted heap.. and has optional key and reverse keywords


realistically, to keep data in a heap, can use some sort of tuple, and the cost should be the first element, e.g.
a = [(c, x, y)]
while a:
  cost, x, y = heapq.heappop(a)

# Flood Fill 
An example of a breadth first search algorithm..  need to exhaustively explore a space  
For each element in the space, check if it's been seen, 
if not, explore.  This generates sets of regions.  Example is a 2d map where each region is marked by a 
specific char.  
And in AoC 24.12 part 1 goal is to determine the area * perimeter for each region..

Implementation
(use a deque to keep track of the search space.. use a set to keep track of seen elements)
Area in this case is just the number of elements in a region..
For perimeter for each element, check the number of edges that are on the permimeter, and sum..




functools.reduce(fn, seq)          # maps seq to single element right to left

# reminder that lists have a pop() and popleft() command to implement stack and fifo queue like behavior

# Also in functools there is total_ordering decorator
# Requires just one compare operation and generates the others..
@total_ordering
class Node:
  ...
  def __lt__(self,other):
    return self.v < other.v


# @dataclasses   another decorator that generates some default code (constructors, etc)
@dataclass

class Box:  
  x: float = 0.0
  y: float = 0.0

#*****************************************************************************#
# import re

s = re.sub("regex", "replace", s)  # return a new copy with subs

re.findall(r"regex", s)

re.split(r"regex", s)

r"string" - raw strings, backslash does not escape anything
? is 0 or 1
* is 0 or more
+ is 1 or more



# fudging a matrix layout to improve boundary condition handling, not necessarily efficient, but 
# likely will use less code


# import sys

data = open("../data/"+sys.argv[1])).read()  # text block (str)
grid = data.split("\n")                      # list of strings
grid = ["." + g + "." for g in grid]         # add a boundary (extra cols)
b = "."*len(grid[0])+"."                     # adds a dummy row (if grid is symmetric)
grid = [b] + grid + [b]
